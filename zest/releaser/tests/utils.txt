Utility functions
=================

.. :doctest:

We're testing ``utils.py`` here:

    >>> from zest.releaser import utils


Log level
---------

A ``-v`` on the commandline turns on debug level logging:

    >>> import sys
    >>> import logging
    >>> orig_argv = sys.argv[1:]
    >>> sys.argv[1:] = []
    >>> utils.loglevel() == logging.INFO
    True
    >>> sys.argv[1:] = ['-v']
    >>> utils.loglevel() == logging.DEBUG
    True


Version numbers
---------------

Strip all whitespace in a version:

    >>> utils.strip_version('1.0')
    '1.0'
    >>> utils.strip_version(' 1.0   dev  ')
    '1.0dev'

Remove development markers in various common forms:

    >>> utils.cleanup_version('1.0')
    '1.0'
    >>> utils.cleanup_version('1.0 dev')
    '1.0'
    >>> utils.cleanup_version('1.0 (svn/devel)')
    '1.0'
    >>> utils.cleanup_version('1.0 svn')
    '1.0'
    >>> utils.cleanup_version('1.0 devel 13')
    '1.0'
    >>> utils.cleanup_version('1.0 beta devel 13')
    '1.0 beta'


Asking input
------------

Asking input on the prompt is not unittestable unless we do some mocking:

    >>> answers = []
    >>> def mock_raw_input(q):
    ...     print "Question:", q
    ...     answer = answers.pop()
    ...     print "Our reply:", answer
    ...     return answer

The default is True, so hitting enter (which means no input) returns True

    >>> answers = ['']
    >>> utils.ask('Does mocking work?', raw_input=mock_raw_input)
    Question: Does mocking work? (Y/n)?
    Our reply:
    True

A default of False also changes the Y/n to y/N:

    >>> answers = ['']
    >>> utils.ask('Does mocking work?',
    ...           default=False, raw_input=mock_raw_input)
    Question: Does mocking work? (y/N)?
    Our reply:
    False

A default of None requires an answer:

    >>> answers = ['', 'y']
    >>> answers.reverse() # .pop() works from the end
    >>> utils.ask('Does mocking work?',
    ...           default=None, raw_input=mock_raw_input)
    Question: Does mocking work? (y/n)?
    Our reply:
    Please explicitly answer y/n
    Question: Does mocking work? (y/n)?
    Our reply: y
    True

Y and n can be upper or lower case:

    >>> answers = ['y']
    >>> utils.ask('Does mocking work?',
    ...           default=None, raw_input=mock_raw_input)
    Question: Does mocking work? (y/n)?
    Our reply: y
    True
    >>> answers = ['Y']
    >>> utils.ask('Does mocking work?',
    ...           default=None, raw_input=mock_raw_input)
    Question: Does mocking work? (y/n)?
    Our reply: Y
    True
    >>> answers = ['n']
    >>> utils.ask('Does mocking work?',
    ...           default=None, raw_input=mock_raw_input)
    Question: Does mocking work? (y/n)?
    Our reply: n
    False
    >>> answers = ['N']
    >>> utils.ask('Does mocking work?',
    ...           default=None, raw_input=mock_raw_input)
    Question: Does mocking work? (y/n)?
    Our reply: N
    False

Yes and no are fine:

    >>> answers = ['yes']
    >>> utils.ask('Does mocking work?',
    ...           default=None, raw_input=mock_raw_input)
    Question: Does mocking work? (y/n)?
    Our reply: yes
    True
    >>> answers = ['no']
    >>> utils.ask('Does mocking work?',
    ...           default=None, raw_input=mock_raw_input)
    Question: Does mocking work? (y/n)?
    Our reply: no
    False

The y or n must be the first character, however, to prevent accidental input
from causing mishaps:

    >>> answers = ['I reallY do not want it', 'n']
    >>> answers.reverse() # .pop() works from the back to front.
    >>> utils.ask('Does mocking work?',
    ...           default=None, raw_input=mock_raw_input)
    Question: Does mocking work? (y/n)?
    Our reply: I reallY do not want it
    Please explicitly answer y/n
    Question: Does mocking work? (y/n)?
    Our reply: n
    False